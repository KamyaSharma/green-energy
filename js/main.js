// Load your images on page-load

function preloader() {
    const imagesList = [
           "./images/solar.jpg",
           "./images/geothermal.jpg",
           "./images/hydroelec.jpg"
        ];
    const images = [];
    for (let i = 0; i < imagesList.length; i++) {
        images[i] = new Image();
        images[i].src = imagesList[i];
    }

    // Images ready to be used:
    console.log(`Preloaded images:\n\t${images[0].src}\n\t${images[1].src}\n\t${images[2].src}`);
};
window.addEventListener("load", preloader);


/* 
Get all buttons in a NODE LIST of buttons (array like structure) */

let buttonList = document.querySelectorAll("button");                      

/* 
Complete your resource-object that will store the dynamic content.
Resource object should 3 sub-objects. Give your sub-objects
meaningful names. Every sub-object should have the following
properties headingContent, bodyText, imgUrl and imgAlt. */

let object = {
    Solar: {
        headingContent: "SOLAR ENERGY",
        bodyText: "The most direct use of this renewable energy source, is achieved by capturing the sun’s energy directly. A variety of solar energy technologies are used to convert the sun’s energy and light into heat, illumination, hot water, electricity and (paradoxically) cooling systems for businesses and industry. Solar hot water systems can be used to heat buildings by circulating water through flat-plate solar collectors. The sun’s heat can be concentrated by mirror-covered dishes that are focused to boil water in a conventional steam generator to produce electricity. ",
        imgUrl: "./images/solar.jpg",
        imgAlt: "Solar"
    },
    Geothermal: {
        headingContent: "GEOTHERMAL ENERGY",
        bodyText: "Geothermal energy, as the name implies, is derived from the heat of the earth itself. This heat can be sourced close to the surface or from heated rock and reservoirs of hot water miles beneath our feet. Geothermal power plants harness these heat sources to generate electricity. On a much smaller scale, a geothermal heat pump system can leverage the constant temperature of the ground just ten feet under the surface to help supply heat to a nearby building in the winter, or help cool it in the summer.",
        imgUrl: "./images/geothermal.jpg",
        imgAlt: "Factory"
    },
    Hydroelectric: {
        headingContent: "HYDROELECTRIC ENERGY",
        bodyText: "The most familiar type of hydroelectric power is generated by a system in which dams are constructed to store water in a reservoir. When released, the water flows through turbines to produce electricity. This is known as “pumped-storage hydropower”—water is cycled between lower and upper reservoirs to control electricity generation between times of low and peak demand. Another type, called “run-of-river hydropower,” funnels a portion of river flow through a channel and does not require a dam. Hydropower plants can range in size from massive projects like the Hoover Dam to micro-hydroelectric power systems.",
        imgUrl: "./images/hydroelec.jpg",
        imgAlt: "Dam"
    }
};

/* 
Get the reference to your HTML-container
that will be dynamically loaded from the resource-object. */

let data = document.getElementById("maincontent");



/* 
The first button in a NODE LIST of buttons will initially 
have the id: active-button - this will uniquely style 
the active button (CSS rule). */

buttonList[0].setAttribute("id", "active-button");

/*    
The first content from the
resource-object will be loaded on the page load:
`<h1>${headingContent}</h1>
 <img src="${imgUrl}" alt="${imgAlt}">
 <p>${bodyText}</p>` */

data.innerHTML = `<h1>${object.Solar.headingContent}</h1>
     <img src="${object.Solar.imgUrl}" alt="${object.Solar.imgAlt}">
     <p>${object.Solar.bodyText}</p>`;



/* 
Start your handleSelection function here. */
function handleSelection() {


    /* 
    Remove the id active-button from the element that
    contains it prior to the click-event. 

    This will require the loop throught the NODE LIST of buttons. 
    Inside the loop, use conditional and the element object method
    hasAttribute() to check if the current button in the loop containes the id.
    If it does, use element-object property removeAttribute()
    to remove the id. */
    for (let i = 0; i < buttonList.length; i++) {
        if (buttonList[i].hasAttribute("id")) {
            buttonList[i].removeAttribute("id");
        }
    }

    /*
    Use the element-object method setAttribute() to set the id active-button 
    to the currently clicked button. */

    this.setAttribute("id", "active-button");

    /* 
    Use conditional and event-object to check which button is clicked
    and based on that, create HTML with the data inside the backticks:
    `<h1>${headingContent}</h1>
     <img src="${imgUrl}" alt="${imgAlt}">
     <p>${bodyText}</p>`
    Assign this content to to your HTML-container that will 
    be dynamically loaded (you already got the reference to 
    this container before you started the function handleSelection) */

    for (let i = 0; i < buttonList.length; i++) {
        if (buttonList[i].hasAttribute("id")) {
            if (i == 0) {
                data.innerHTML = `<h1>${object.Solar.headingContent}</h1><img src="${object.Solar.imgUrl}" alt="${object.Solar.imgAlt}"><p>${object.Solar.bodyText}</p>`;
            }
            if (i == 1) {
                data.innerHTML = `<h1>${object.Geothermal.headingContent}</h1><img src="${object.Geothermal.imgUrl}" alt="${object.Geothermal.imgAlt}"><p>${object.Geothermal.bodyText}</p>`;
            }
            if (i == 2) {
                data.innerHTML = `<h1>${object.Hydroelectric.headingContent}</h1><img src="${object.Hydroelectric.imgUrl}" alt="${object.Hydroelectric.imgAlt}"><p>${object.Hydroelectric.bodyText}</p>`;
            }
        }
    }

    /* 
    Close your handleSelection function here. */
} //handleSelection
/* 
Register all buttons to click event. The event-handler handleSelection will listen 
for this event to happen. */
//    buttonList.addEventListener("click", handleSelection);
for (let i = 0; i < buttonList.length; i++) {
    buttonList[i].addEventListener("click", handleSelection)
}
